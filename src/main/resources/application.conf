# In this file you can override any option defined in the reference files.
# Copy in parts of the reference files and modify as you please.

akka {
  # Logger config for Akka internals and classic actors, the new API relies
  # directly on SLF4J and your config for the logger backend.

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  // loggers = ["akka.event.Logging$DefaultLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"
  # loglevel = "INFO"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-dead-letters = 100
  log-dead-letters-during-shutdown = on

  coordinated-shutdown {
    exit-jvm = on
    run-by-jvm-shutdown-hook = on //this is the default value
  }

  //  actor {
  //    provider = "cluster"
  //
  //    default-dispatcher {
  //      # Throughput for default Dispatcher, set to 1 for as fair as possible
  //      throughput = 10
  //    }
  //  }
  //
  //  remote.artery {
  //    # The port clients should connect to.
  //    canonical.port = 4711
  //  }

  actor {
    debug {
      # enable function of Actor.loggable(), which is to log any received message
      # at DEBUG level, see the “Testing Actor Systems” section of the Akka
      # Documentation at http://akka.io/docs
      receive = on # off

      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill etc.)
      autoreceive = on # off

      # enable DEBUG logging of actor lifecycle changes
      lifecycle = off

      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = off

      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = off

      # enable DEBUG logging of unhandled messages
      unhandled = off

      # enable WARN logging of misconfigured routers
      router-misconfiguration = off
    }
  }
}

// akka.actor.allow-java-serialization = off
akka.actor.allow-java-serialization = on
akka.actor.warn-about-java-serializer-usage = off



examples {
  arso {
    ljubljana-url = "http://localhost:7074/uploads/probase/www/observ/surface/text/sl/observationAms_LJUBL-ANA_BEZIGRAD_latest.xml"
  }
}

// akka.http.client.connecting-timeout = 1 s
// akka.http.client.idle-timeout = 2 sec
// akka.http.host-connection-pool.max-retries = 0

// datastax-java-driver {
//   basic.contact-points = ["127.0.0.1:9042"]
//   # basic.load-balancing-policy.local-datacenter = "datacenter1"
// }

// datastax-java-driver.advanced.reconnect-on-init = true
datastax-java-driver.profiles {
  akka-persistence-cassandra-snapshot-profile {
    basic.request.consistency = QUORUM
  }
}
datastax-java-driver {
  # basic {
  #   session-keyspace = my_keyspace
  #   cloud {
  #     secure-connect-bundle = /path/to/secure-connect-database_name.zip
  #   }
  # }

  basic {
    contact-points = ["127.0.0.1:9042", "127.0.0.1:9043", "127.0.0.1:9044"]
    load-balancing-policy {
      local-datacenter = datacenter1
    }
  }
  advanced {
    reconnect-on-init = true
    auth-provider {
      class = PlainTextAuthProvider
      username = cassandra
      password = cassandra
    }

    connection.warn-on-init-error = false
  }
}

akka.persistence.journal {
  plugin = "akka.persistence.cassandra.journal"
  auto-start-journals = ["akka.persistence.cassandra.journal"]
}
akka.persistence.snapshot-store.plugin = "akka.persistence.cassandra.snapshot"

akka.persistence.cassandra {
  journal.tables-autocreate = true
  journal.keyspace-autocreate = true

  snapshot.tables-autocreate = true
  snapshot.keyspace-autocreate = true
}

